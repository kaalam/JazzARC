{"experiment_path": "./experiments/2020-05-24_204334", "solved": [], "not_solved": ["fe9372f3.json", "37d3e8b2.json", "1f85a75f.json", "ff72ca3e.json", "b527c5c6.json", "40f6cd08.json", "4cd1b7b2.json", "c8b7cc0f.json", "1b60fb0c.json", "c444b776.json", "84f2aca1.json", "3979b1a8.json", "6b9890af.json", "sound003.json", "1d398264.json", "2bee17df.json", "626c0bcc.json", "c35c1b4c.json", "2037f2c7.json", "sound001.json", "2c737e39.json", "b7249182.json", "2f0c5170.json", "762cd429.json", "6df30ad6.json"], "stop_rlz": {"broken_threshold": 0.05, "max_broken_walks": 50, "max_elapsed_sec": 30, "min_num_walks": 50, "stop_num_full_matches": 1}, "search_conf": ["\"\"\"", "\tThis file contains global numerical constants only!!", "\t----------------------------------------------------", "", "\tWhen moved to Kagglespace, these constants will be replaced in the source code by their values.", "", "\tAll configurable constants must be here and nothing else!!", "\"\"\"", "", "# MoveGen specific", "", "MAX_MOVES_AT_ROOT\t\t= 150", "NUM_MOVES_STP_DISCOUNT\t= 0.75", "", "# nm <- MAX_MOVES_AT_ROOT", "# st <- 1", "", "# while (nm >= 1) {", "# \tcat(sprintf('step: %3i, nm: %3i\\n', st, nm))", "# \tnm <- as.integer(nm*NUM_MOVES_STP_DISCOUNT)", "# \tst <- st + 1", "# }", "", "# step:   1, nm: 150", "# step:   2, nm: 112", "# step:   3, nm:  84", "# step:   4, nm:  63", "# step:   5, nm:  47", "# step:   6, nm:  35", "# step:   7, nm:  26", "# step:   8, nm:  19", "# step:   9, nm:  14", "# step:  10, nm:  10", "# step:  11, nm:   7", "# step:  12, nm:   5", "# step:  13, nm:   3", "# step:  14, nm:   2", "# step:  15, nm:   1", "# >", "", "# Priors, rewards and evals", "", "NUM_TOP_SOLUTIONS\t\t= 3", "", "WEIGHT_PRIOR_BY_FORM\t= 0.4\t\t# prior = (1 - WEIGHT_PRIOR_BY_FORM)*prior + WEIGHT_PRIOR_BY_FORM*prior_by_form[form]", "WEIGHT_MIN_IN_EVAL\t\t= 0.4\t\t# ev = eval[IDX_PIC_REACH_MEAN]*(1 - WEIGHT_MIN_IN_EVAL) + eval[IDX_PIC_REACH_MIN]*WEIGHT_MIN_IN_EVAL", "", "# Constants for MCTS walks", "", "ADD_EXP_NOISE_EACH\t\t= 50000", "DIRICHLET_ALPHA \t\t= 0.15", "EXPLORATION_FRAC\t\t= 0.25", "", "UCB_C_BASE\t\t\t\t= 19652", "UCB_C_INIT\t\t\t\t= 1.25", "UCB_DISCOUNT\t\t\t= 0.997", "", "REWARD_DISCOUNT\t\t\t= 0.9", "", "# Reward XGBoost", "", "DUMMY_REWARD_INSTEAD\t=  0", "XGB_N_ESTIMATORS\t\t= 25", "XGB_ETA\t\t\t\t\t= .3", "XGB_GAMMA\t\t\t\t=  0", "XGB_MAX_DEPTH\t\t\t=  6", "XGB_MIN_CHILD_WEIGHT\t=  1", "XGB_MAX_DELTA_STEP\t\t=  0", "XGB_SUBSAMPLE\t\t\t=  1", "XGB_REG_LAMBDA\t\t\t=  1", "XGB_REG_ALPHA\t\t\t=  0", "XGB_VERBOSE\t\t\t\t= -1", "", "# Constants for special events in CodeEval", "", "EVAL_FULL_MATCH\t\t\t=  10", "EVAL_WRONG_SHAPE\t\t=  -2", "EVAL_MAX_PIC_SIZE\t\t=  40", "", "# Indices inside a 1x18 numpy array for eval", "", "IDX_PIC_REACH_MIN\t\t=  0", "IDX_PIC_BETTER_MIN\t\t=  1", "IDX_PIC_WORSE_MIN\t\t=  2", "IDX_PAT_REACH_MIN\t\t=  3", "IDX_PAT_BETTER_MIN\t\t=  4", "IDX_PAT_WORSE_MIN\t\t=  5", "", "IDX_PIC_REACH_MEAN\t\t=  6", "IDX_PIC_BETTER_MEAN\t\t=  7", "IDX_PIC_WORSE_MEAN\t\t=  8", "IDX_PAT_REACH_MEAN\t\t=  9", "IDX_PAT_BETTER_MEAN\t\t= 10", "IDX_PAT_WORSE_MEAN\t\t= 11", "", "IDX_PIC_REACH_MAX\t\t= 12", "IDX_PIC_BETTER_MAX\t\t= 13", "IDX_PIC_WORSE_MAX\t\t= 14", "IDX_PAT_REACH_MAX\t\t= 15", "IDX_PAT_BETTER_MAX\t\t= 16", "IDX_PAT_WORSE_MAX\t\t= 17", "", "LENGTH_CODE_EVAL\t\t= 18"], "git_commit_long_hash": "571d24a13217b0fb1af7f54dde3bdd25923c420e"}